- hosts: localhost
  connection: local
  become: true

  tasks:
    # Swap 無効化
    - name: Swap off
      ansible.builtin.command:
        cmd: swapoff -a

    - name: Disable swap in /etc/fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(.*/swap.*)$'
        replace: '#\1'

    # カーネルモジュールロード
    - name: Load overlay module
      ansible.builtin.modprobe:
        name: overlay
        state: present

    - name: Load br_netfilter module
      ansible.builtin.modprobe:
        name: br_netfilter
        state: present

    # sysctl
    - name: Configure sysctl for Kubernetes
      ansible.builtin.copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        mode: 0644

    - name: Apply sysctl settings
      ansible.builtin.command:
        cmd: sysctl --system

    # containerd
    - name: Install containerd
      ansible.builtin.apt:
        name: containerd
        state: present
        update_cache: yes

    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: 0755

    - name: Write containerd config
      ansible.builtin.shell:
        executable: /usr/bin/bash
        cmd: containerd config default > /etc/containerd/config.toml
        creates: /etc/containerd/config.toml

    - name: Set systemd cgroup driver in containerd
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: yes

    # kubeadm, kubelet, kubectl のインストール
    - name: Install deps
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - curl
          - gpg
        state: present
        update_cache: yes

    - name: Create keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755

    - name: Download Kubernetes GPG key and dearmor
      ansible.builtin.shell:
        executable: /usr/bin/bash
        cmd: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      ansible.builtin.apt_repository:
        repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /'
        state: present

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install kubeadm, kubelet, kubectl
      ansible.builtin.apt:
        name:
          - kubeadm
          - kubelet
          - kubectl
        state: present
        update_cache: yes

    - name: Hold kubeadm, kubelet, kubectl packages
      ansible.builtin.command:
        cmd: apt-mark hold kubeadm kubelet kubectl

    - name: Enable kubelet service
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes
        state: started

    # Kubernetes Master 初期化
    - name: Initialize Kubernetes Master
      ansible.builtin.command:
        cmd: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=Mem
        creates: /etc/kubernetes/admin.conf
      ignore_errors: true

    - name: Wait for admin.conf to exist
      ansible.builtin.wait_for:
        path: /etc/kubernetes/admin.conf
        state: present
        timeout: 120

    - name: Create .kube directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: 0755

    - name: Copy admin.conf to user's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: 0644
        remote_src: yes

    # CNI ネットワーク（Flannel）適用
    - name: Apply Flannel CNI network
      ansible.builtin.command:
        cmd: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

    # taint を外す
    - name: Remove master node taint
      ansible.builtin.command:
        cmd: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      ignore_errors: true

    - name: Write nginx manifest to file in home
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/nginx.yaml"
        content: |
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                - name: nginx
                  image: nginx
                  ports:
                  - containerPort: 80
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx
          spec:
            type: NodePort
            selector:
              app: nginx
            ports:
            - port: 80
              targetPort: 80
        mode: 0644

    - name: Apply nginx manifest from home
      ansible.builtin.command:
        cmd: kubectl apply -f "{{ ansible_env.HOME }}/nginx.yaml"

    # 確認用コマンド:
    # kubectl get nodes
    # kubectl get pods -A
    # kubectl get svc nginx
